name: voice assistant workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test_with_linters:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10' ]
    name: Python ${{ matrix.python-version }} version
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy

      - name: Lint with wemake-python-styleguide for python ${{ matrix.python-version }} version
        uses: wemake-services/wemake-python-styleguide@0.16.1

      - name: Lint with mypy for python ${{ matrix.python-version }} version
        run: mypy assistant_api auth movies_admin movies_api postgres_elastic_etl

  test_services_in_docker:
    runs-on: ubuntu-latest
    needs: test_with_linters
    steps:
      - uses: actions/checkout@v3

      - name: 'Create movies_api env file'
        run: |
          echo "${{ secrets.MOVIES_API_ENV }}" > movies_api/envs/.movies_api.env

      - name: 'Create assistant_api env file'
        run: |
          echo "${{ secrets.ASSISTANT_API_ENV }}" > assistant_api/envs/.assistant_api.env

      - name: Build the stack
        run: docker-compose -f docker-compose.ci.yml up -d --build movies-api es redis

      - name: Run tests for movies-api
        run: docker-compose -f docker-compose.ci.yml up test-movies-api
      
      # TODO enable testing for assistant-api
      # it was disabled because github actions could not install pymystem3 package
      # - name: Run tests for assistant-api
      #   run: |
      #     docker-compose -f docker-compose.ci.yml up assistant-api
      #     docker-compose -f docker-compose.ci.yml exec -T assistant-api pytest

  notification:
    runs-on: ubuntu-latest
    needs: test_services_in_docker
    if: always()
    steps:

      - name: Workflow Status Action
        uses: martialonline/workflow-status@v3
        id: check
      - run: echo 'COMMIT_RESULT=with error' >> $GITHUB_ENV
        if: steps.check.outputs.status == 'failure'
      - run: echo 'COMMIT_RESULT=successfully' >> $GITHUB_ENV
        if: steps.check.outputs.status == 'success'

      - name: Send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit to ${{ github.head_ref }}
            Pipeline for ${{ github.event.pull_request.head.sha }} finished ${{ env.COMMIT_RESULT }}!
